### Initial imports
import os
import numpy as np
import pymc3 as pm

os.environ["THEANO_FLAGS"] = "OMP_NUM_THREADS=1, MKL_NUM_THREADS=1, OPENBLAS_NUM_THREADS=1"
os.environ["OMP_NUM_THREADS"] = "1"
os.environ["MKL_NUM_THREADS"] = "1"
os.environ["OPENBLAS_NUM_THREADS"] = "1"

import warnings

warnings.simplefilter(action="ignore", category=FutureWarning)

from epimodel.pymc3_models import cm_effect
from epimodel.pymc3_models.cm_effect.datapreprocessor import DataPreprocessor
import argparse

argparser = argparse.ArgumentParser()
argparser.add_argument("--cd", dest="cases_delay", type=int)
argparser.add_argument("--dd", dest="death_delay", type=int)
argparser.add_argument("--gi", dest="gen_int", type=int)
args = argparser.parse_args()

if __name__ == "__main__":
    dp = DataPreprocessor()

    data = dp.preprocess_data("notebooks/double-entry-data/double_entry_final.csv", last_day="2020-05-30",
                              schools_unis="whoops")
    data.mask_reopenings()

    if args.cases_delay == 0:
        cases_delay = np.array([0.00000000e+00, 7.30730194e-02, 9.05944549e-02, 1.09021210e-01,
                                1.13769129e-01, 1.08781205e-01, 9.79678727e-02, 8.45692698e-02,
                                7.06768231e-02, 5.76011261e-02, 4.60540234e-02, 3.61613234e-02,
                                2.80073503e-02, 2.14724412e-02, 1.62657394e-02, 1.22093839e-02,
                                9.12436896e-03, 6.75242087e-03, 4.95588483e-03, 3.64065728e-03,
                                2.66002640e-03, 1.92277797e-03, 1.38352711e-03, 1.00580147e-03,
                                7.15711739e-04, 5.08590513e-04, 3.66668356e-04, 2.64485737e-04,
                                1.84762179e-04, 1.30887101e-04, 9.21366068e-05, 6.69215591e-05])
    elif args.cases_delay == 1:
        cases_delay = np.array([0., 0.0252817, 0.03717965, 0.05181224, 0.06274125,
                                0.06961334, 0.07277174, 0.07292397, 0.07077184, 0.06694868,
                                0.06209945, 0.05659917, 0.0508999, 0.0452042, 0.03976573,
                                0.03470891, 0.0299895, 0.02577721, 0.02199923, 0.01871723,
                                0.01577148, 0.01326564, 0.01110783, 0.00928827, 0.0077231,
                                0.00641162, 0.00530572, 0.00437895, 0.00358801, 0.00295791,
                                0.0024217, 0.00197484])
    else:
        cases_delay = np.array([0., 0.01201615, 0.01914216, 0.02857021, 0.03706211,
                                0.04404607, 0.04938025, 0.05307243, 0.05517405, 0.05596146,
                                0.05565125, 0.05438705, 0.05247164, 0.04994029, 0.04710581,
                                0.04401318, 0.04086948, 0.03764513, 0.03447098, 0.03136174,
                                0.02845183, 0.0256552, 0.02302945, 0.02061953, 0.01841498,
                                0.01638336, 0.01451073, 0.01284291, 0.01133173, 0.00997953,
                                0.00875821, 0.0076811])

    if args.death_delay == 0:
        death_delay = np.array([0.00000000e+00, 7.02259465e-06, 1.21439774e-04, 6.71713401e-04,
                                2.13475766e-03, 4.89173720e-03, 9.10262719e-03, 1.46466990e-02,
                                2.11431324e-02, 2.81547042e-02, 3.51124955e-02, 4.15211464e-02,
                                4.70585512e-02, 5.14276829e-02, 5.44193305e-02, 5.61558892e-02,
                                5.65334537e-02, 5.58263829e-02, 5.41278817e-02, 5.15638568e-02,
                                4.84795155e-02, 4.50163429e-02, 4.12533989e-02, 3.74232402e-02,
                                3.36167717e-02, 2.99374655e-02, 2.64573142e-02, 2.31916188e-02,
                                2.01684696e-02, 1.74539479e-02, 1.50025956e-02, 1.28113794e-02,
                                1.08931555e-02, 9.22894500e-03, 7.75082216e-03, 6.49765570e-03,
                                5.43657721e-03, 4.50692791e-03, 3.73797602e-03, 3.08039670e-03,
                                2.54412381e-03, 2.08844409e-03, 1.70796836e-03, 1.38590683e-03,
                                1.12473743e-03, 9.18704278e-04, 7.39994800e-04, 5.94864881e-04,
                                4.76625277e-04, 3.88876179e-04, 3.08749707e-04, 2.49124323e-04,
                                1.96643762e-04, 1.58208390e-04, 1.25751113e-04, 1.00916463e-04,
                                8.03375939e-05, 6.37478252e-05, 5.04693432e-05, 4.02465789e-05,
                                3.16127876e-05, 2.45568579e-05, 2.00566192e-05, 1.43118701e-05])
    elif args.death_delay == 1:
        death_delay = np.array([0.00000000e+00, 2.24600347e-06, 3.90382088e-05, 2.34307085e-04,
                                7.83555003e-04, 1.91221622e-03, 3.78718437e-03, 6.45923913e-03,
                                9.94265709e-03, 1.40610714e-02, 1.86527920e-02, 2.34311421e-02,
                                2.81965055e-02, 3.27668001e-02, 3.68031574e-02, 4.03026198e-02,
                                4.30521951e-02, 4.50637136e-02, 4.63315047e-02, 4.68794406e-02,
                                4.67334059e-02, 4.59561441e-02, 4.47164503e-02, 4.29327455e-02,
                                4.08614522e-02, 3.85082076e-02, 3.60294203e-02, 3.34601703e-02,
                                3.08064505e-02, 2.81766028e-02, 2.56165924e-02, 2.31354369e-02,
                                2.07837267e-02, 1.86074383e-02, 1.65505661e-02, 1.46527043e-02,
                                1.29409383e-02, 1.13695920e-02, 9.93233881e-03, 8.66063386e-03,
                                7.53805464e-03, 6.51560047e-03, 5.63512264e-03, 4.84296166e-03,
                                4.14793478e-03, 3.56267297e-03, 3.03480656e-03, 2.59406730e-03,
                                2.19519042e-03, 1.85454286e-03, 1.58333238e-03, 1.33002321e-03,
                                1.11716435e-03, 9.35360376e-04, 7.87780158e-04, 6.58601602e-04,
                                5.48147154e-04, 4.58151351e-04, 3.85878963e-04, 3.21623249e-04,
                                2.66129174e-04, 2.21364768e-04, 1.80736566e-04, 1.52350196e-04])
    else:
        death_delay = np.array([0.00000000e+00, 8.48290869e-07, 1.58273217e-05, 1.00310395e-04,
                                3.49875336e-04, 8.81251434e-04, 1.80713859e-03, 3.21725474e-03,
                                5.15165928e-03, 7.54710992e-03, 1.04184406e-02, 1.35848648e-02,
                                1.70146722e-02, 2.04955334e-02, 2.40021892e-02, 2.73161603e-02,
                                3.03277826e-02, 3.30517116e-02, 3.53335024e-02, 3.72013272e-02,
                                3.85878252e-02, 3.94438623e-02, 3.99162152e-02, 3.99259705e-02,
                                3.95368729e-02, 3.88371111e-02, 3.77977985e-02, 3.65028713e-02,
                                3.50043432e-02, 3.33436241e-02, 3.16082107e-02, 2.97113877e-02,
                                2.78582963e-02, 2.59116362e-02, 2.40525509e-02, 2.21809869e-02,
                                2.03784246e-02, 1.86707704e-02, 1.70230324e-02, 1.54893225e-02,
                                1.40072579e-02, 1.26631745e-02, 1.13642402e-02, 1.02308567e-02,
                                9.15018991e-03, 8.15595953e-03, 7.26788828e-03, 6.45413178e-03,
                                5.72990345e-03, 5.05392725e-03, 4.45804756e-03, 3.94636074e-03,
                                3.45902880e-03, 3.02925785e-03, 2.65097593e-03, 2.32454021e-03,
                                2.02732588e-03, 1.76243590e-03, 1.53715886e-03, 1.33980846e-03,
                                1.16254915e-03, 1.00330486e-03, 8.69207936e-04, 7.53896186e-04])

    if args.gen_int == 0:
        gi_mean = 4
    elif args.gen_int == 1:
        gi_mean = 6
    else:
        gi_mean = 8

    with cm_effect.models.CMCombined_Final(data) as model:
        model.DelayProbCases = cases_delay.reshape((1, cases_delay.size))
        model.DelayProbDeaths = death_delay.reshape((1, death_delay.size))
        model.build_model(serial_interval_mean=gi_mean)

    with model.model:
        model.trace = pm.sample(4000, cores=2, chains=2, max_treedepth=12)


    out_dir = "grid"
    if not os.path.exists(out_dir):
        os.makedirs(out_dir)

    np.savetxt(os.path.join(out_dir, f'{args.cases_delay}-{args.death_delay}-f{args.gen_int}.txt'), model.trace.CMReduction)